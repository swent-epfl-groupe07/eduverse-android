name: Android CI - Test

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  android-ci:
    name: Android CI
    runs-on: ubuntu-latest

    env:
      app_name: Eduverse

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Step 2: Remove current Gradle cache to avoid caching issues
      - name: Remove current gradle cache
        run: rm -rf ~/.gradle

      # Step 3: Set up JDK (Java 17)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Step 4: Cache Gradle for faster builds
      - name: Retrieve Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Step 5: Install Android SDK and Emulator tools
      - name: Set up Android SDK
        uses: actions/setup-android@v3
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          emulator: true

      # Step 6: Create AVD
      - name: Create AVD
        run: echo "no" | avdmanager create avd -n github_emulator -k "system-images;android-34;google_apis;x86_64" --device "pixel"

      # Step 7: Run instrumentation tests
      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: github_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x1920
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

      # Step 8: Generate the coverage report for tests
      - name: Generate Test Coverage
        run: ./gradlew jacocoTestReport

      # Step 9: Upload the test coverage report
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Coverage report
          path: app/build/reports/jacoco/jacocoTestReport
