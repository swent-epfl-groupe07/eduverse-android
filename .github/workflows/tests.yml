name: Android CI - Test

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  android-ci:
    name: Android CI
    runs-on: ubuntu-latest

    env:
      app_name: Eduverse
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Add SonarCloud token to GitHub secrets

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0  # Needed for a more complete Sonar analysis

      # Step 2: Remove current Gradle cache to avoid caching issues
      - name: Remove current gradle cache
        run: rm -rf ~/.gradle

      # Step 3: Set up JDK (Java 17)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Step 4: Cache Gradle for faster builds
      - name: Retrieve Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Step 5: SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectKey: swent-epfl-groupe07_eduverse-android   # Replace with your SonarCloud project key
          organization: swent-epfl-groupe07   # Replace with your SonarCloud organization
          token: ${{ secrets.SONAR_TOKEN }}

      # Step 6: Build the Android app
      - name: Build Android app
        run: ./gradlew assembleDebug lint --parallel --build-cache

      # Step 7: Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew check --parallel --build-cache

      # Step 8: Install Android SDK command line tools
      - name: Install Android SDK command line tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O commandlinetools.zip
          mkdir -p $ANDROID_HOME/cmdline-tools
          unzip commandlinetools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools" "emulator" "platforms;android-34" "system-images;android-34;google_apis;x86_64"

      # Step 9: Create AVD
      - name: Create AVD
        run: echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n github_emulator -k "system-images;android-34;google_apis;x86_64" --device "pixel"

      # Step 10: Run instrumentation tests
      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: github_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x1920
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

      # Step 11: Generate the coverage report for tests
      - name: Generate Test Coverage
        run: ./gradlew jacocoTestReport

      # Step 12: Upload the test coverage report
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Coverage report
          path: app/build/reports/jacoco/jacocoTestReport

      # Step 13: Check SonarCloud Quality Gate
      - name: Check the SonarCloud Quality Gate
        run: |
          QUALITY_GATE_STATUS=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=swent-epfl-groupe07_eduverse-android" | jq -r .projectStatus.status)
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "SonarCloud Quality Gate failed: $QUALITY_GATE_STATUS"
            exit 1
          fi
